---
version: "3.9"

x-var:
  - &POSTGRES_USER
    postgres
  - &POSTGRES_PW
    default
  - &POSTGRES_DB
    postgres

services:
  database:
    build:
      context: database
    container_name: database
    environment:
      POSTGRES_USER: *POSTGRES_USER
      POSTGRES_PASSWORD: *POSTGRES_PW
      POSTGRES_DB: *POSTGRES_DB
    healthcheck:
      test: ["CMD", "pg_isready", "-U", *POSTGRES_USER]
    ports:
      - "5432:5432"
    user: *POSTGRES_USER

  database-migrations:
    image: flyway/flyway:9.19-alpine
    container_name: backend-migrations
    command: info migrate info
    volumes: ["./backend/db/migrations:/flyway/sql:ro"]
    environment:
      FLYWAY_URL: jdbc:postgresql://database:5432/postgres
      FLYWAY_USER: *POSTGRES_USER
      FLYWAY_PASSWORD: *POSTGRES_PW
      FLYWAY_BASELINE_ON_MIGRATE: true
      FLYWAY_DEFAULT_SCHEMA: USERS
    depends_on:
      database:
        condition: service_healthy

  database-migrations-go:
    profiles: ["go"]
    image: flyway/flyway:9-alpine
    container_name: go-api-migrations
    command: info migrate info
    volumes: ["./backend-go/db/migrations:/flyway/sql:ro"]
    environment:
      FLYWAY_URL: jdbc:postgresql://database:5432/postgres
      FLYWAY_USER: *POSTGRES_USER
      FLYWAY_PASSWORD: *POSTGRES_PW
      FLYWAY_BASELINE_ON_MIGRATE: true
      FLYWAY_DEFAULT_SCHEMA: go_api
    depends_on:
      database:
        condition: service_healthy

  backend:
    container_name: backend
    entrypoint: sh -c "npm i && npm run start"
    environment:
      NODE_ENV: development
      POSTGRESQL_HOST: database
      POSTGRESQL_USER: *POSTGRES_USER
      POSTGRESQL_PASSWORD: *POSTGRES_PW
      POSTGRESQL_DATABASE: *POSTGRES_DB
    image: node:18-bullseye
    # links:
    #   - database
    ports:
      - "3001:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    user: root
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
    working_dir: "/app"
    depends_on:
      database:
        condition: service_healthy
      database-migrations:
        condition: service_started
      
  backend-go:
    image: cosmtrek/air:latest
    working_dir: /application # has to be the same as mapped vol
    volumes: ["./backend-go/:/application/"]
    container_name: backend-go
    environment:
      POSTGRESQL_HOST: database
      POSTGRESQL_USER: *POSTGRES_USER
      POSTGRESQL_PASSWORD: *POSTGRES_PW
      POSTGRESQL_DATABASE: *POSTGRES_DB
    entrypoint:
      - "sh"
      - "-c"
      - "go install github.com/swaggo/swag/cmd/swag@latest && swag init && swag fmt && /go/bin/air"
    ports:
      - "3005:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
    depends_on:
      database:
        condition: service_healthy
      database-migrations-go:
        condition: service_completed_successfully

  frontend:
    container_name: frontend
    entrypoint:
      - "sh"
      - "-c"
      - "chown -R root . && npm ci && npm run dev"
    environment:
      NODE_ENV: development
      BACKEND_URL: backend
    image: registry.access.redhat.com/ubi8/nodejs-18-minimal
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app:z
      - /app/node_modules
    user: root
    working_dir: "/app"
    depends_on:
      backend:
        condition: service_healthy
