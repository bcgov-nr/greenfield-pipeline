apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    openshift.io/display-name: "Frontend Deployment Template"
    description: "Template for deploying the frontend component with proper networking, scaling, and security configurations."
    tags: "frontend,nodejs,quickstart"
    iconClass: "icon-nodejs"
    openshift.io/documentation-url: "https://github.com/bcgov/quickstart-openshift"
    openshift.io/provider-display-name: "BC Government"
parameters:
  - name: NAME
    description: "Application name, used to group and identify resources"
    required: true
    value: quickstart
  - name: COMPONENT
    description: "Component identifier within the application (frontend/backend)"
    value: frontend
  - name: ZONE
    description: "Deployment zone (e.g. dev, test, prod, pr-###). Used for resource isolation"
    required: true
    pattern: "^(dev|test|prod|pr-[0-9]+)$"
  - name: REGISTRY
    description: "Container registry URL. Use 'image-registry.openshift-image-registry.svc:5000' for internal registry"
    value: ghcr.io
  - name: ORG
    description: "Organization or project name in the container registry"
    value: bcgov
  - name: TAG
    description: "Container image tag to deploy"
    value: latest
  - name: DOMAIN
    description: "Base domain for route generation"
    value: apps.silver.devops.gov.bc.ca
  - name: CPU_REQUEST
    description: "Minimum CPU resources required (in millicores)"
    value: "25m"
    pattern: "^[0-9]+[m]?$"
  - name: MEMORY_REQUEST
    description: "Minimum memory resources required"
    value: "50Mi"
    pattern: "^[0-9]+[KMGTPkmgtp]i?$"
  - name: CPU_LIMIT
    description: "Maximum CPU resources allowed (in millicores)"
    value: "75m"
    pattern: "^[0-9]+[m]?$"
  - name: MEMORY_LIMIT
    description: "Maximum memory resources allowed"
    value: "150Mi"
    pattern: "^[0-9]+[KMGTPkmgtp]i?$"
  - name: MIN_REPLICAS
    description: "Minimum number of pod replicas for high availability"
    value: "3"
    pattern: "^[0-9]+$"
  - name: MAX_REPLICAS
    description: "Maximum number of pod replicas for scaling"
    value: "5"
    pattern: "^[0-9]+$"
  - name: LOG_LEVEL
    description: "Logging level (DEBUG, INFO, WARN, ERROR, PANIC, FATAL)"
    value: "info"
    pattern: "^(debug|info|warn|error|panic|fatal)$"
objects:
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: "${NAME}-${ZONE}"
        component: "${COMPONENT}"
      name: "${NAME}-${ZONE}-${COMPONENT}"
    spec:
      replicas: 1
      selector:
        matchLabels:
          deployment: "${NAME}-${ZONE}-${COMPONENT}"
          component: "${COMPONENT}"
      strategy:
        type: RollingUpdate
      template:
        metadata:
          labels:
            app: "${NAME}-${ZONE}"
            component: "${COMPONENT}"
            deployment: "${NAME}-${ZONE}-${COMPONENT}"
        spec:
          volumes:
          - emptyDir: {}
            name: data
          - emptyDir: {}
            name: config
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - ${NAME}-${ZONE}
                topologyKey: kubernetes.io/hostname
          containers:
            - image: ${REGISTRY}/${ORG}/${NAME}/${COMPONENT}:${TAG}
              securityContext:
                capabilities:
                  add: ["NET_BIND_SERVICE"]
              imagePullPolicy: Always
              name: "${NAME}-${ZONE}-${COMPONENT}"
              env:
                - name: BACKEND_URL
                  value: "https://${NAME}-${ZONE}-backend.${DOMAIN}:443"
                - name: LOG_LEVEL
                  value: "${LOG_LEVEL}"
              ports:
                - containerPort: 3000
                  protocol: TCP
              resources:
                requests:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
                limits:
                  cpu: "${CPU_LIMIT}"
                  memory: "${MEMORY_LIMIT}"
              readinessProbe:
                httpGet:
                  path: /health
                  port: 3001
                  scheme: HTTP
                initialDelaySeconds: 5
                periodSeconds: 2
                timeoutSeconds: 2
                successThreshold: 1
                failureThreshold: 30
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /health
                  port: 3001
                  scheme: HTTP
                initialDelaySeconds: 15
                periodSeconds: 30
                timeoutSeconds: 5
              volumeMounts:
              - mountPath: /data
                name: data
              - mountPath: /config
                name: config

  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: "${NAME}-${ZONE}"
        component: "${COMPONENT}"
      name: "${NAME}-${ZONE}-${COMPONENT}"
    spec:
      ports:
        - name: 3000-tcp
          protocol: TCP
          port: 80
          targetPort: 3000
      selector:
        deployment: "${NAME}-${ZONE}-${COMPONENT}"
        component: "${COMPONENT}"

  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: "${NAME}-${ZONE}"
        component: "${COMPONENT}"
      name: "${NAME}-${ZONE}-${COMPONENT}"
    spec:
      host: "${NAME}-${ZONE}-${COMPONENT}.${DOMAIN}"
      port:
        targetPort: 3000-tcp
      to:
        kind: Service
        name: "${NAME}-${ZONE}-${COMPONENT}"
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect

  - apiVersion: autoscaling/v2
    kind: HorizontalPodAutoscaler
    metadata:
      name: "${NAME}-${ZONE}-${COMPONENT}"
      labels:
        app: "${NAME}-${ZONE}"
        component: "${COMPONENT}"
    spec:
      scaleTargetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: "${NAME}-${ZONE}-${COMPONENT}"
      minReplicas: ${{MIN_REPLICAS}}
      maxReplicas: ${{MAX_REPLICAS}}
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 100

  - apiVersion: policy/v1
    kind: PodDisruptionBudget
    metadata:
      labels:
        app: "${NAME}-${ZONE}"
        component: "${COMPONENT}"
      name: "${NAME}-${ZONE}-${COMPONENT}"
    spec:
      selector:
        matchLabels:
          app: "${NAME}-${ZONE}"
          component: "${COMPONENT}"
      minAvailable: 1

  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: "${NAME}-${ZONE}-allow-frontend-to-backend"
      labels:
        app: "${NAME}-${ZONE}"
        component: "${COMPONENT}"
    spec:
      podSelector:
        matchLabels:
          app: "${NAME}-${ZONE}"
          component: "${COMPONENT}"
      ingress:
        - ports:
            - protocol: TCP
              port: 3000
          from:
            - podSelector:
                matchLabels:
                  app: "${NAME}-${ZONE}"
                  component: backend
      policyTypes:
        - Ingress

  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: "${NAME}-${ZONE}-openshift-ingress-to-frontend"
      labels:
        app: "${NAME}-${ZONE}"
        component: "${COMPONENT}"
    spec:
      podSelector:
        matchLabels:
          app: "${NAME}-${ZONE}"
          component: "${COMPONENT}"
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  network.openshift.io/policy-group: ingress
      policyTypes:
        - Ingress
