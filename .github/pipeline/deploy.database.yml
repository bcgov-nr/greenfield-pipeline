apiVersion: v1
kind: Template
metadata:
  name: ${NAME}
  annotations:
    description: "Greenfield Template"
    tags: "gfp"
    iconClass: icon-js
labels:
  app: ${NAME}-${SUFFIX}
  app.kubernetes.io/part-of: ${NAME}-$(SUFFIX)
parameters:
  - name: NAME
    description: Product name
    value: gfp
  - name: COMPONENT
    description: Component name
    value: database
  - name: SUFFIX
    description: Deployment suffix, e.g. pr-### or prod
    required: true
  - name: NAMESPACE
    description: Namespace to deploy to
    value: 32d13a-dev
  - description: Password for the PostgreSQL connection user.
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    name: DB_PASSWORD
  - description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Database Volume Capacity
    name: DB_PVC_SIZE
    required: true
    value: 1Gi
objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}-${COMPONENT}-${SUFFIX}
      labels:
        app: ${NAME}-${SUFFIX}
    stringData:
      database-name: "${NAME}"
      database-password: "${DB_PASSWORD}"
      database-user: "${NAME}"
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}-${COMPONENT}-${SUFFIX}
      labels:
        app: ${NAME}-${SUFFIX}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "${DB_PVC_SIZE}"
      storageClassName: netapp-file-standard
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${NAME}-${COMPONENT}-${SUFFIX}
      labels:
        app: ${NAME}-${SUFFIX}
    spec:
      lookupPolicy:
        local: false
      tags:
      - name: pr-${SUFFIX}
        from:
          kind: DockerImage
          name: image-registry.openshift-image-registry.svc:5000/openshift/postgresql:12
        referencePolicy:
          type: Local
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${NAME}-${COMPONENT}-${SUFFIX}
      labels:
        app: ${NAME}-${SUFFIX}
    spec:
      replicas: 1
      strategy:
        type: Recreate
        recreateParams:
          timeoutSeconds: 600
        resources: {}
        activeDeadlineSeconds: 21600
      revisionHistoryLimit: 10
      template:
        metadata:
          name: ${NAME}-${COMPONENT}-${SUFFIX}
          labels:
            app: ${NAME}-${SUFFIX}
        spec:
          volumes:
            - name: ${NAME}-${COMPONENT}-${SUFFIX}
              persistentVolumeClaim:
                claimName: ${NAME}-${COMPONENT}-${SUFFIX}
          containers:
            - name: ${NAME}-${COMPONENT}-${SUFFIX}
              image: image-registry.openshift-image-registry.svc:5000/${NAMESPACE}/${NAME}-${COMPONENT}-${SUFFIX}:pr-${SUFFIX}
              ports:
                - containerPort: 5432
                  protocol: TCP
              env:
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${COMPONENT}-${SUFFIX}
                      key: database-name
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${COMPONENT}-${SUFFIX}
                      key: database-password
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${COMPONENT}-${SUFFIX}
                      key: database-user
              volumeMounts:
                - name: ${NAME}-${COMPONENT}-${SUFFIX}
                  mountPath: "/var/lib/pgsql/data"
              livenessProbe:
                initialDelaySeconds: 30
                tcpSocket:
                  port: 5432
                timeoutSeconds: 1
              readinessProbe:
                exec:
                  command:
                    - /bin/bash
                    - -c
                    - pg_isready -h localhost -p 5432
                initialDelaySeconds: 20
                timeoutSeconds: 15
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          schedulerName: default-scheduler
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${SUFFIX}
      name: ${NAME}-${COMPONENT}-${SUFFIX}
    spec:
      ports:
        - name: postgresql
          nodePort: 0
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        name: ${DATABASE_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${DATABASE_SERVICE_NAME}
      annotations:
        template.openshift.io.bcgov/create: "true"
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
      storageClassName: ${STORAGE_CLASS}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
            appver: gwells${NAME_SUFFIX}
        spec:
          containers:
            - capabilities: {}
              env:
                - name: PG_PRIMARY_PORT
                  value: "5432"
                - name: CONTAINER_NAME
                  value: postgresql
                - name: PG_PRIMARY_HOST
                  value: ${DATABASE_SERVICE_NAME}
                - name: PGDATA_PATH_OVERRIDE
                  value: userdata
                - name: PGHOST
                  value: /tmp
                - name: PG_DATABASE
                  valueFrom:
                    secretKeyRef:
                        key: database-name
                        name: ${DATABASE_SERVICE_NAME}
                - name: PG_PASSWORD
                  valueFrom:
                    secretKeyRef:
                        key: database-password
                        name: ${DATABASE_SERVICE_NAME}
                - name: PG_USER
                  valueFrom:
                    secretKeyRef:
                        key: database-user
                        name: ${DATABASE_SERVICE_NAME}
              envFrom:
              - secretRef:
                  name: crunchy-db-credentials
              image: " "
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 5432
                timeoutSeconds: 1
              name: postgresql
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /usr/bin/env
                    - bash
                    - '-c'
                    - >-
                      psql -q -d
                      $PG_DATABASE -c 'SELECT 1'
                failureThreshold: 5
                initialDelaySeconds: 30
                periodSeconds: 15
                successThreshold: 1
                timeoutSeconds: 1
              resources:
                requests:
                  cpu: ${REQUEST_CPU}
                  memory: ${REQUEST_MEMORY}
                limits:
                  cpu: ${LIMIT_CPU}
                  memory: ${LIMIT_MEMORY}
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              volumeMounts:
                - mountPath: /pgdata
                  name: ${DATABASE_SERVICE_NAME}-data
                - mountPath: /var/run/postgresql
                  name: ${DATABASE_SERVICE_NAME}-run
                - mountPath: /pgconf
                  name: ${DATABASE_SERVICE_NAME}-setupcfg
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
            - name: ${DATABASE_SERVICE_NAME}-data
              persistentVolumeClaim:
                claimName: ${DATABASE_SERVICE_NAME}
            - name: ${DATABASE_SERVICE_NAME}-run
              emptyDir: {}
            - configMap:
                name: ${DATABASE_SERVICE_NAME}-setupcfg
              name: ${DATABASE_SERVICE_NAME}-setupcfg
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - postgresql
            from:
              kind: ImageStreamTag
              name: ${IMAGE_STREAM_NAME}:${IMAGE_STREAM_VERSION}
              namespace: ${IMAGE_STREAM_NAMESPACE}
            lastTriggeredImage: ""
          type: ImageChange
        - type: ConfigChange
    status: {}
