apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${NAME}
  annotations:
    description: "Greenfield Pipeline"
    tags: "gfp"
    iconClass: icon-js
labels:
  app.kubernetes.io/part-of: "${NAME}"
  app: ${NAME}-${SUFFIX}
parameters:
  - name: NAME
    description: Module name
    value: gfp
  - name: SUFFIX
    description: Deployment suffix, e.g. pr-### or prod
    required: true
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: CPU_REQUEST
    value: 250m
  - name: MEMORY_REQUEST
    value: 1Gi
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${NAME}-${SUFFIX}
      name: ${NAME}-${SUFFIX}
    spec:
      lookupPolicy:
        local: false
      tags:
      - name: pr-${SUFFIX}
        from:
          kind: DockerImage
          name: ghcr.io/bcgov-nr/greenfield-pipeline:pr-${SUFFIX}
        referencePolicy:
          type: Local
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}-${SUFFIX}
      name: ${NAME}-${SUFFIX}
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        name: ${NAME}-${SUFFIX}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            name: ${NAME}-${SUFFIX}
        spec:
          containers:
            - image: image-registry.openshift-image-registry.svc:5000/245e18-dev/${NAME}-${SUFFIX}:pr-${SUFFIX}
              imagePullPolicy: Always
              name: ${NAME}
              ports:
                - containerPort: 3000
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              readinessProbe:
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                # first probe will fire some time between:
                # initialDelaySeconds and initialDelaySeconds + periodSeconds
                initialDelaySeconds: 30
                periodSeconds: 120
                timeoutSeconds: 1
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                # first probe will fire some time between:
                # initialDelaySeconds and initialDelaySeconds + periodSeconds
                initialDelaySeconds: 30
                periodSeconds: 120
                timeoutSeconds: 5
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${SUFFIX}
      name: ${NAME}-${SUFFIX}
    spec:
      ports:
        - name: 3000-tcp
          protocol: TCP
          port: 80
          targetPort: 3000
      selector:
        name: ${NAME}-${SUFFIX}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${SUFFIX}
      name: ${NAME}-${SUFFIX}
    spec:
      host: ${NAME}-${SUFFIX}.${DOMAIN}
      port:
        targetPort: 3000-tcp
      to:
        kind: Service
        name: ${NAME}-${SUFFIX}
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect

  - kind: DeploymentConfig
    apiVersion: apps.openshift.io/v1
    metadata:
      labels:
        app: ${NAME}-${SUFFIX}
      name: ${NAME}-${SUFFIX}-postgres
    spec:
      strategy:
        type: Recreate
        recreateParams:
          timeoutSeconds: 600
        activeDeadlineSeconds: 21600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        name: ${NAME}-${SUFFIX}-postgres
      template:
        metadata:
          labels:
            name: ${NAME}-${SUFFIX}-postgres
        spec:
          volumes:
            - name: postgresql-data
              persistentVolumeClaim:
                claimName: ${NAME}-${SUFFIX}-postgres
          containers:
            - resources:
                limits:
                  memory: 512Mi
              readinessProbe:
                exec:
                  command:
                    - /usr/libexec/check-container
                initialDelaySeconds: 5
                timeoutSeconds: 1
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              terminationMessagePath: /dev/termination-log
              name: postgresql
              livenessProbe:
                exec:
                  command:
                    - /usr/libexec/check-container
                    - '--live'
                initialDelaySeconds: 120
                timeoutSeconds: 10
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              env:
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: postgresql
                      key: database-user
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgresql
                      key: database-password
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: postgresql
                      key: database-name
              securityContext:
                capabilities: {}
                privileged: false
              ports:
                - containerPort: 5432
                  protocol: TCP
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: postgresql-data
                  mountPath: /var/lib/pgsql/data
              terminationMessagePolicy: File
              image: >-
                image-registry.openshift-image-registry.svc:5000/openshift/postgresql@sha256:c51c2456d92ce71905d72088fa14379eb27ec123860bc3b0d4564b7221eb9ca9
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          schedulerName: default-scheduler
