name: Pull Request

on:
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment:
      name: dev
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy
    needs: Build
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          set -ex
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.NAMESPACE }}

          # Process and apply deployment config
          oc process -f .pipeline/deploy.yml \
            -p SUFFIX=${{ github.event.number }} -p ENV=${{ secrets.ENV }} \
          | oc apply -f -

          # Check rollout status, with timeout
          timeout 5s oc rollout status dc/gfp-${{ github.event.number }}

          # Cancel any rollouts in progress (TODO: think of something less clunky)
          oc rollout cancel dc/gfp-${{ github.event.number }}

          # Start new rollout and follow it
          oc rollout latest dc/gfp-${{ github.event.number }}
          oc logs -f dc/gfp-${{ github.event.number }}

          # Get rollout status and process result
          STATUS=$(oc rollout history dc/gfp-${{ github.event.number }} \
            | grep -v -e '^[[:space:]]*$' | tail -n1 | awk '{print $2}' \
          )
          if [ "${STATUS}" == "Complete" ]
          then
            echo "Build successful"
          else
            echo -e "\n--- ERROR ---\n"
            echo -e "Deployment status: ${STATUS}"
            exit 1
          fi

  cleanup:
    name: Cleanup
    needs: Deploy
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:
      - uses: actions/checkout@v2
      - name: Cleanup
        run: |
          set -ex
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.NAMESPACE }}

          # Remove old build runs, build pods and deployment pods
          oc delete all -l app=gfp-${{ github.event.number }}
