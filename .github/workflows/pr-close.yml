name: Cleanup

on:
  pull_request:
    types:
      - closed
    paths-ignore:
      - ".**"
      - "**.md"
      - "**.yml"
      - "**.yaml"

env:
  REGISTRY: ghcr.io
  NAME: gfp

jobs:
  # Clean up OpenShift when PR closed, no conditions
  cleanup-openshift:
    name: Cleanup OpenShift
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:
      - uses: actions/checkout@v2
      - name: Remove OpenShift artifacts
        run: |
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.OC_NAMESPACE }}

          # Remove old build runs, build pods and deployment pods
          oc delete all,pvc,secret -l app=${{ env.NAME }}-${{ github.event.number }}

  # If merged, then handle any image promotion
  image-backend:
    name: Backend Image Handling
    outputs:
      build: ${{ steps.check.outputs.build }}
    env:
      COMPONENT: backend
      PREV: ${{ github.event.number }}
      ZONE: test
    environment:
      name: test
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    steps:
      - name: Check for image changes
        id: check
        run: |
          # Vars
          IMG_OLD="${{ env.REGISTRY }}/${{ github.repository }}:${{ env.PREV }}-${{ env.COMPONENT }}"
          IMG_NEW="${{ env.REGISTRY }}/${{ github.repository }}:${{ env.ZONE }}-${{ env.COMPONENT }}"

          # Make sure an image exists to promote; grab SHA
          if [[ ! $(docker pull "${IMG_OLD}") ]]; then
              echo -e "\n No images to promote"
              exit 0
          fi
          SHA_OLD=$(docker inspect -f '{{.Id}}' "${IMG_OLD}")

          # Use blank SHA for promoted image, unless a real one exists instead
          SHA_NEW=""
          if [[ $(docker pull "${IMG_NEW}") ]]; then
            SHA_NEW=$(docker inspect -f '{{.Id}}' "${IMG_NEW}")
          fi

          # Output SHAs
          echo -e "\n${IMG_OLD}: ${SHA_OLD}"
          echo -e "${IMG_NEW}: ${SHA_NEW}\n"

          # If different, then trigger updates
          if [[ "${SHA_OLD}" != "${SHA_NEW}" ]]; then
            echo "::set-output name=build::true"
            echo "Image has changed"

            # Login to OpenShift and select project
            oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
            oc project ${{ secrets.OC_NAMESPACE }}

            oc delete is/${{ env.NAME }}-${{ env.ZONE}}-${{ env.COMPONENT }} || true
            exit 0
          fi
          echo "Image promotion not required"

      - name: Promote Backend Image
        if: steps.check.outputs.build == 'true'
        uses: shrink/actions-docker-registry-tag@v2
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}
          target: ${{ github.event.number }}-${{ env.COMPONENT }}
          tags: |
            ${{ env.PROMOTION }}-${{ env.COMPONENT }}

  # If merged, then handle any image promotion
  image-frontend:
    name: Frontend Image Handling
    outputs:
      build: ${{ steps.check.outputs.build }}
    env:
      COMPONENT: frontend
      PREV: ${{ github.event.number }}
      ZONE: test
    environment:
      name: test
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    steps:
      - name: Check for image changes
        id: check
        run: |
          # Vars
          IMG_OLD="${{ env.REGISTRY }}/${{ github.repository }}:${{ env.PREV }}-${{ env.COMPONENT }}"
          IMG_NEW="${{ env.REGISTRY }}/${{ github.repository }}:${{ env.ZONE }}-${{ env.COMPONENT }}"

          # Make sure an image exists to promote; grab SHA
          if [[ ! $(docker pull "${IMG_OLD}") ]]; then
              echo -e "\n No images to promote"
              exit 0
          fi
          SHA_OLD=$(docker inspect -f '{{.Id}}' "${IMG_OLD}")

          # Use blank SHA for promoted image, unless a real one exists instead
          SHA_NEW=""
          if [[ $(docker pull "${IMG_NEW}") ]]; then
            SHA_NEW=$(docker inspect -f '{{.Id}}' "${IMG_NEW}")
          fi

          # Output SHAs
          echo -e "\n${IMG_OLD}: ${SHA_OLD}"
          echo -e "${IMG_NEW}: ${SHA_NEW}\n"

          # If different, then trigger updates
          if [[ "${SHA_OLD}" != "${SHA_NEW}" ]]; then
            echo "::set-output name=build::true"
            echo "Image has changed"

            # Login to OpenShift and select project
            oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
            oc project ${{ secrets.OC_NAMESPACE }}

            oc delete is/${{ env.NAME }}-${{ env.ZONE}}-${{ env.COMPONENT }} || true
            exit 0
          fi
          echo "Image promotion not required"

      - name: Promote Backend Image
        if: steps.check.outputs.build == 'true'
        uses: shrink/actions-docker-registry-tag@v2
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}
          target: ${{ github.event.number }}-${{ env.COMPONENT }}
          tags: |
            ${{ env.PROMOTION }}-${{ env.COMPONENT }}

  # Notify when PR merged and branch = main
  merge-notification:
    name: Merge Notification
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    steps:
      - name: Pre-merge update
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          allow-repeats: false
          message: |
            Your Pull Request code is being promoted!  Please follow the link below.

            [Main Merge Workflow](https://github.com/${{ github.repository }}/actions/workflows/merge-main.yml)
