name: .Helm Deployer

on:
  workflow_call:
    inputs:
      ### Required
      # Only secrets!

      ### Typical / recommended
      atomic:
        description: Atomic deployment?  That means fail all or nothing
        default: true
        required: false
        type: string
      directory:
        description: Chart directory
        default:  'charts/app'
        required: false
        type: string
      environment:
        description: Environment name; omit for PRs
        required: false
        type: string
      oc_server:
        default: https://api.silver.devops.gov.bc.ca:6443
        description: OpenShift server
        required: false
        type: string
      params:
        description: Extra parameters to pass to helm upgrade
        required: false
        type: string
      tag:
        description: Specify a tag to deploy; defaults to PR number
        default: ${{ github.event.number }}
        type: string
      triggers:
        description: Paths used to trigger a deployment; e.g. ('./backend/' './frontend/)
        required: false
        type: string
      db_user:
        description: The database user
        required: false
        type: string

      ### Usually a bad idea / not recommended
      timeout-minutes:
        description: 'Timeout minutes'
        default: 10
        required: false
        type: number
      values:
        description: 'Values file'
        default: 'values.yaml'
        required: false
        type: string

    outputs:
      tag:
        description: 'Which tag was used for deployment?'
        value: ${{ jobs.deploy.outputs.tag }}
      triggered:
        description: 'Has a deployment has been triggered?'
        value: ${{ jobs.deploy.outputs.triggered }}

    secrets:
      oc_namespace:
        description: OpenShift namespace
        required: true
      oc_token:
        description: OpenShift token
        required: true
      postgres_password:
        description: The database password
        required: true

permissions: {}

jobs:
  database:
    name: Database
    uses: ./.github/workflows/.deployer-db.yml
    secrets:
      oc_namespace: ${{ secrets.oc_namespace }}
      oc_token: ${{ secrets.oc_token }}
    with:
      environment: ${{ inputs.environment }}
      triggers: ${{ inputs.triggers }}

  init:
    name: Init
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-24.04
    timeout-minutes: 1
    steps:
      - uses: bcgov/action-deployer-openshift@541a7b1ed72cdd919a56262665d98410e6d97cb6 # v3.1.0
        id: deploys
        with:
          file: common/openshift.init.yml
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_server: ${{ vars.oc_server }}
          oc_token: ${{ secrets.oc_token }}
          overwrite: false
          parameters:
            -p NAME=${{ github.event.repository.name }}
            -p NAMESPACE=${{ secrets.oc_namespace }}
            -p POSTGRES_DATABASE=app-${{ github.event.number }}
            -p POSTGRES_HOST=postgres-crunchy-primary.${{ secrets.oc_namespace }}.svc
            -p POSTGRES_PASSWORD=${{ secrets.postgres_password }}
            -p POSTGRES_USER=app-${{ github.event.number }}
            -p ZONE=${{ inputs.tag }}
          triggers: ${{ inputs.triggers }}

  deploy:
    name: Deploy
    environment: ${{ inputs.environment }}
    needs: database, init
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    strategy:
      matrix:
        name: [backend, frontend]
        include:
          - name: frontend
            file: frontend/openshift.deploy.yml
            overwrite: true
            parameters:
              -p MIN_REPLICAS=1
              -p MAX_REPLICAS=1
          - name: backend
            file: backend/openshift.deploy.yml
            overwrite: true
            parameters:
              -p MIN_REPLICAS=1
              -p MAX_REPLICAS=1
    steps:
      - uses: bcgov/action-deployer-openshift@541a7b1ed72cdd919a56262665d98410e6d97cb6 # v3.1.0
        id: deploys
        with:
          file: ${{ matrix.file }}
          oc_namespace: ${{ secrets.oc_namespace }}
          oc_server: ${{ vars.oc_server }}
          oc_token: ${{ secrets.oc_token }}
          overwrite: ${{ matrix.overwrite }}
          parameters:
            -p NAME=${{ github.event.repository.name }}
            -p ZONE=${{ inputs.tag }} -p TAG=${{ inputs.tag }}
            ${{ matrix.parameters }}
          timeout: 15m
          triggers: ${{ inputs.triggers }}
