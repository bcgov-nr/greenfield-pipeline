name: Code Coverage

on:
  workflow_call:
    inputs:
      app_name:
        type: string
        required: true
        description: Name of app (e.g. gfp, fom)
      component:
        type: string
        required: true
        description: Component (e.g. backend, frontend), also used as path
      template_file:
        type: string
        required: true
        description: Template file (e.g. .github/openshift/deploy.frontend.yml)
      template_vars:
        type: string
        required: true
        description: Variables to pass (e.g. -p ZONE=...)
      zone:
        type: string
        required: true
        description: Default zone (pr#, test, demo, prod)
    secrets:
      oc_namespace:
        required: true
        description: OpenShift namespace (e.g. abc123-dev)
      oc_server:
        required: true
        description: OpenShift server (e.g. https://api.silver.devops.gov.bc.ca:6443)
      oc_token:
        required: true
        description: OpenShift access token

jobs:
  deploy:
    name: ${{ inputs.component }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Deploy
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.oc_token }} --server=${{ secrets.oc_server }}
          oc project ${{ secrets.oc_namespace }}

          # Clean previous images
          oc delete is ${{ inputs.app_name }}-${{ inputs.zone }}-${{ inputs.component }} || true

          # Process and apply template
          oc process -f ${{ inputs.template_file }} ${{ inputs.template_vars }} | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ inputs.app_name }}-${{ inputs.zone }}-${{ inputs.component }} -w

      - name: Deployment Verification
        run: |
          # Pick out a url (host+path), if in template
          URL=$( \
            oc process -f ${{ inputs.template_file }} ${{ inputs.template_vars }} --local \
              | jq -r '.items[] | select(.kind=="Route") | .spec | .host + "/" +.path' \
          )

          # If URL exists and is usable (e.g. at least a hostname), then test it
          if [ ! -z "${URL%/*}" ] && [ $(curl -Lso /dev/null -w "%{http_code}" "${URL}") -ne 200 ]
          then
              echo "Status != 200 for ${{ inputs.url }}"
              exit 1
          fi
          echo "Deployment successful"
