name: Pull Request Open

on:
  pull_request:

env:
  REGISTRY: ghcr.io
  NAME: gfp

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-backend:
    name: Check Backend
    uses: ./.github/workflows/_build-check.yml
    with:
      triggers: ('backend/')
      component: backend
      prev: prod
      zone: ${{ github.event.number }}

  check-frontend:
    name: Check Frontend
    uses: ./.github/workflows/_build-check.yml
    with:
      triggers: ('frontend/')
      component: frontend
      prev: prod
      zone: ${{ github.event.number }}

  build-backend:
    name: Backend Image Build
    if: needs.check-backend.outputs.build == 'true'
    needs:
      - check-backend
    uses: ./.github/workflows/_build-image.yml
    with:
      component: backend
      zone: ${{ github.event.number }}]

  build-frontend:
    name: Frontend Image Build
    if: needs.check-frontend.outputs.build == 'true'
    needs:
      - check-frontend
    uses: ./.github/workflows/_build-image.yml
    with:
      component: frontend
      zone: ${{ github.event.number }}

  tests-backend:
    name: Backend Unit Tests
    if: needs.check-backend.outputs.build == 'true'
    needs:
      - check-backend
    uses: ./.github/workflows/_code-cov.yml
    with:
      component: backend
      lcov_file: backend/coverage/lcov.info
      test_cmd: npm run test:cov

  tests-frontend:
    name: Frontend Unit Tests
    if: needs.check-frontend.outputs.build == 'true'
    needs:
      - check-frontend
    uses: ./.github/workflows/_code-cov.yml
    with:
      component: frontend
      lcov_file: coverage
      test_cmd: npm run test:cov

  sonarcloud:
    name: Static Analysis
    needs:
      - build-backend
      - build-frontend
      - tests-backend
      - tests-frontend
    if: always() && (needs.build-backend.result == 'success' || needs.build-frontend.result == 'success')
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
        # Disable shallow clone for SonarCloud analysis
        with:
          fetch-depth: 0

      - name: Cache for backend test results
        id: cache-backend
        uses: actions/cache@v3
        with:
          path: backend/coverage
          key: backend-coverage-${{ github.run_number }}
          restore-keys: |
            backend-coverage-

      - name: Cache for frontend test results
        id: cache-frontend
        uses: actions/cache@v3
        with:
          path: frontend/coverage
          key: frontend-coverage-${{ github.run_number }}
          restore-keys: |
            frontend-coverage-

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.exclusions=**/test/**,.github/**/*
            -Dsonar.organization=bcgov-sonarcloud
            -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info,frontend/coverage/lcov.info
            -Dsonar.cobertura.reportPaths=backend/coverage/cobertura-coverage.xml,frontend/coverage/cobertura-coverage.xml
            -Dsonar.project.monorepo.enabled=true
            -Dsonar.projectKey=greenfield-template
            -Dsonar.sources=backend,frontend
            -Dsonar.tests=backend/test,frontend/test

  deploy-dev:
    name: DEV Deployment
    needs:
      - build-backend
      - build-frontend
      - tests-backend
      - tests-frontend
    if: always() && (needs.build-backend.result == 'success' || needs.build-frontend.result == 'success')
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    env:
      DOMAIN: apps.silver.devops.gov.bc.ca
      ZONE: ${{ github.event.number }}
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.OC_NAMESPACE }}

          # Database uses a default build; 'oc create' kicks up an error if objects already exist
          oc process -f .github/openshift/deploy.database.yml -p ZONE=${{ env.ZONE }} | oc create -f - || true

          # Clean previous images
          oc delete is ${{ env.name }}-${{ inputs.zone }}-backend || true
          oc delete is ${{ env.name }}-${{ inputs.zone }}-frontend || true

          # Process and apply template
          oc process -f .github/openshift/deploy.backend.yml -p ZONE=${{ env.ZONE }} \
            -p PROMOTE=${{ github.repository }}:${{ env.ZONE }}-backend | oc apply -f -

          # Process and apply template
          oc process -f .github/openshift/deploy.frontend.yml -p ZONE=${{ env.ZONE }} \
            -p PROMOTE=${{ github.repository }}:${{ env.ZONE }}-frontend | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-database -w
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-backend -w
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-frontend -w

      - name: Deployment Verification
        env:
          LINKS: (
            'https://${{ env.NAME }}-${{ github.event.number }}-backend.${{ env.DOMAIN }}'
            'https://${{ env.NAME }}-${{ github.event.number }}-frontend.${{ env.DOMAIN }}'
            )
        run: |
          LINKS=${{ env.LINKS }}
          for l in "${LINKS[@]}"; do
              if [ $(curl -L -s -o /dev/null -w "%{http_code}" "${l}") -ne 200 ]
              then
                  echo "Status != 200 for ${l}"
                  exit 1
              fi
          done

          echo "Deployment verification successful"

      - name: DEV Deployment update
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          allow-repeats: false
          message: |
            DEV deployments have completed successfully!

            [Backend](https://${{ env.NAME }}-${{ github.event.number }}-backend.${{ env.DOMAIN }}/) available
            [Frontend](https://${{ env.NAME }}-${{ github.event.number }}-frontend.${{ env.DOMAIN }}/) available

  # # Uncomment to for development and troubleshooting
  # # https://docs.github.com/en/actions/learn-github-actions/contexts
  # view-context:
  #   name: View GitHub Context
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - name: Echo GitHub context
  #       uses: satackey/action-js-inline@v0.0.2
  #       with:
  #         script: |
  #           const github = require('@actions/github');
  #           console.log(JSON.stringify(github, null, 2));
