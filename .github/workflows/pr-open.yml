name: Pull Request

on:
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TRIGGERS: ('package.json' 'package-lock.json' 'Dockerfile' 'src/' 'test/' '.github/')

jobs:
  check:
    name: Check
    outputs:
      build: ${{ steps.check.outputs.build }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check and process modified files
        id: check
        run: |
          # Fetch main to diff against
          git fetch origin main:refs/remotes/origin/master

          # Trigger build if diff matches any triggers
          TRIGGERS=${{ env.TRIGGERS }}
          while read -r check
          do
              for t in "${TRIGGERS[@]}"; do
                  if [[ "${check}" =~ "${t}" ]]
                  then
                      # Output build=true for next steps
                      echo "::set-output name=build::true"
                      echo -e "${t}\n --> ${check}\n"
                      exit 0
                  fi
              done
          done < <(git diff origin/main --name-only)
          echo "Build and deploy workflows not triggered"

  build:
    name: Build
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/bcgov-nr/greenfield-pipeline:pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  tests:
    name: Tests
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Tests
        run: |
          npm ci
          npm test

  sonarcloud:
    name: SonarCloud
    needs:
      - check
    uses: bcgov/pipeline-templates/.github/workflows/sonar-scanner.yaml@main
    with:
      ORG: bcgov-nr
      PROJECT_KEY: greenfield-pipeline
      URL: https://sonarcloud.io
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  codeql:
    name: CodeQL
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Initialize
        uses: github/codeql-action/init@v1
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v1

      - name: Analysis
        uses: github/codeql-action/analyze@v1

  deploy:
    name: Deploy
    needs: 
      - build
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          set -eux

          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.NAMESPACE }}

          # Cancel any rollouts in progress
          oc rollout cancel dc/gfp-${{ github.event.number }} 2> /dev/null \
            || true && echo "No rollout in progress"
          
          # Remove any stale imagestreams
          oc delete is/gfp-${{ github.event.number }} 2> /dev/null \
            || true && echo "No stale imagestreams"

          # Process and apply deployment template
          oc process -f .github/pipeline/deploy.yml -p SUFFIX=${{ github.event.number }} \
            | oc apply -f -

          # Start rollout (if necessary) and follow it
          oc rollout latest dc/gfp-${{ github.event.number }} 2> /dev/null \
            || true && echo "Rollout in progress"
          oc logs -f dc/gfp-${{ github.event.number }}

          # Get status, returns 0 if rollout is successful
          oc rollout status dc/gfp-${{ github.event.number }}
