name: Pull Request

on:
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  NAME: gfp

jobs:
  build-backend:
    name: Build and Push Backend
    outputs:
      build: ${{ steps.check.outputs.build }}
    environment:
      name: dev
    env:
      TRIGGERS: ('backend/', '.github/openshift/deploy.backend.yml')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check and process modified files
        id: check
        run: |
          # Fetch main to diff against
          git fetch origin main:refs/remotes/origin/master

          # Trigger build if diff matches any triggers
          TRIGGERS=${{ env.TRIGGERS }}
          while read -r check
          do
              for t in "${TRIGGERS[@]}"; do
                  if [[ "${check}" =~ "${t}" ]]
                  then
                      # Output build=true for next steps
                      echo "::set-output name=build::true"
                      echo -e "${t}\n --> ${check}\n"
                  fi
              done
          done < <(git diff origin/main --name-only)
          echo "Container build not required"

      - if: steps.check.outputs.build == 'true'
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - if: steps.check.outputs.build == 'true'
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - if: steps.check.outputs.build == 'true'
        name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - if: steps.check.outputs.build == 'true'
        name: Build and push Backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./backend/
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-backend
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Import image
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.NAMESPACE }}

          # Clear stale images for import/replacement]
          oc delete is ${{ env.NAME }}-${{ env.ZONE }}-backend && \
            echo "Previously imported images have been deleted" || \
            echo "No previously imported images have been found"

  build-frontend:
    name: Build and Push Frontend
    outputs:
      build: ${{ steps.check.outputs.build }}
    environment:
      name: dev
    env:
      TRIGGERS: ('frontend/', '.github/openshift/deploy.frontend.yml')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check and process modified files
        id: check
        run: |
          # Fetch main to diff against
          git fetch origin main:refs/remotes/origin/master

          # Trigger build if diff matches any triggers
          TRIGGERS=${{ env.TRIGGERS }}
          while read -r check
          do
              for t in "${TRIGGERS[@]}"; do
                  if [[ "${check}" =~ "${t}" ]]
                  then
                      # Output build=true for next steps
                      echo "::set-output name=build::true"
                      echo -e "${t}\n --> ${check}\n"
                  fi
              done
          done < <(git diff origin/main --name-only)
          echo "Container build not required"

      - if: steps.check.outputs.build == 'true'
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - if: steps.check.outputs.build == 'true'
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - if: steps.check.outputs.build == 'true'
        name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - if: steps.check.outputs.build == 'true'
        name: Build and push Backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend/
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-frontend
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Import image
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.NAMESPACE }}

          # Clear stale images for import/replacement]
          oc delete is ${{ env.NAME }}-${{ env.ZONE }}-frontend && \
            echo "Previously imported images have been deleted" || \
            echo "No previously imported images have been found"

  tests-backend:
    name: Tests for Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Tests
        run: |
          cd backend
          npm ci
          npm test
      - name: Report code coverage
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          title: Backend coverage report
          delete-old-comments: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./backend/coverage/lcov.info

  tests-frontend:
    name: Tests for Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Tests
        run: |
          cd frontend
          npm ci
          npm test
      - name: Report code coverage
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          title: Frontend coverage report
          delete-old-comments: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./frontend/coverage/lcov.info

  sonarcloud:
    name: Static Analysis
    needs:
      - build-backend
      - build-frontend
      - tests-backend
      - tests-frontend
    if: needs.build-backend.outputs.build == 'true' || needs.build-frontend.outputs.build == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        # Disable shallow clone for SonarCloud analysis
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.exclusions=**/test/**
            -Dsonar.organization=bcgov-sonarcloud
            -Dsonar.project.monorepo.enabled=true
            -Dsonar.projectKey=greenfield-template
            -Dsonar.sources=backend,frontend
            -Dsonar.test=**/test

  # https://github.com/marketplace/actions/aqua-security-trivy
  trivy-backend:
    name: Backend Container Scan
    needs:
      - build-backend
      - build-frontend
      - tests-backend
      - tests-frontend
    if: needs.build-backend.outputs.build == 'true'
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Backend container scan
      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@0.3.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-backend
          ignore-unfixed: true
          severity: CRITICAL
          format: "sarif"
          output: "trivy-results-backend.sarif"

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results-backend.sarif"

  # https://github.com/marketplace/actions/aqua-security-trivy
  trivy-frontend:
    name: Frontend Container Scan
    needs:
      - build-backend
      - build-frontend
      - tests-backend
      - tests-frontend
    if: needs.build-frontend.outputs.build == 'true'
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Frontend container scan
      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@0.3.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-frontend
          ignore-unfixed: true
          severity: CRITICAL
          format: "sarif"
          output: "trivy-results-frontend.sarif"

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results-frontend.sarif"

  # https://github.com/marketplace/actions/aqua-security-trivy
  trivy-repo:
    name: Repository Scan
    if: needs.build-backend.outputs.build == 'true' || needs.build-frontend.outputs.build == 'true'
    needs:
      - build-backend
      - build-frontend
      - tests-backend
      - tests-frontend
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.3.0
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-results-repo.sarif"
          severity: "CRITICAL"

  deploy-dev:
    name: DEV Environment Deploy
    if: needs.build-backend.outputs.build == 'true' || needs.build-backend.outputs.build == 'true'
    needs:
      - build-backend
      - build-frontend
      - tests-backend
      - tests-frontend
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: dev
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.NAMESPACE }}

          # Database uses a default build
          oc process -f .github/openshift/deploy.database.yml -p ZONE=${{ github.event.number }} | oc apply -f -

          # Select backend image, then process/apply
          if [ ${{ needs.build-backend.outputs.build == 'true' }} ]
          then
            oc process -f .github/openshift/deploy.backend.yml -p ZONE=${{ github.event.number }} \
              -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-backend | oc apply -f -
          else
            oc process -f .github/openshift/deploy.backend.yml -p ZONE=${{ github.event.number }} | oc apply -f -
          fi

          # Select frontend image, then process/apply
          if [ ${{ needs.build-frontend.outputs.build == 'true' }} ]
          then
            oc process -f .github/openshift/deploy.frontend.yml -p ZONE=${{ github.event.number }} \
              -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-frontend | oc apply -f -
          else
            oc process -f .github/openshift/deploy.frontend.yml -p ZONE=${{ github.event.number }} | oc apply -f -
          fi

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-${{ github.event.number }}-database -w
          oc rollout status dc/${{ env.NAME }}-${{ github.event.number }}-backend -w
          oc rollout status dc/${{ env.NAME }}-${{ github.event.number }}-frontend -w

  zap-backend:
    name: Backend App Scan
    needs:
      - deploy-dev
      - sonarcloud
      - trivy-backend
      - trivy-frontend
      - trivy-repo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          target: https://${{ env.NAME }}-${{ github.event.number }}-backend.apps.silver.devops.gov.bc.ca/
          cmd_options: "-a"
          allow_issue_writing: false
          fail_action: false

  zap-frontend:
    name: Frontend App Scan
    needs:
      - deploy-dev
      - sonarcloud
      - trivy-backend
      - trivy-frontend
      - trivy-repo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          target: https://${{ env.NAME }}-${{ github.event.number }}-frontend.apps.silver.devops.gov.bc.ca/
          cmd_options: "-a"
          allow_issue_writing: false
          fail_action: false

  completion:
    name: Completion
    needs:
      - zap-backend
      - zap-frontend
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Pre-merge update
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          message: |
            Your Pull Request has completed our workflow!  Please make sure a code review has been obtained.

            [Dev - Backend](https://${{ env.NAME }}-${{ github.event.number }}-backend.apps.silver.devops.gov.bc.ca/) available
            [Dev - Frontend](https://${{ env.NAME }}-${{ github.event.number }}-frontend.apps.silver.devops.gov.bc.ca/) available

            Once merged, your code will be promoted to a higher environment.  Please follow the link below.
            [Main Merge Workflow](https://github.com/${{ github.repository }}/actions/workflows/merge-main.yml)
          allow-repeats: false
