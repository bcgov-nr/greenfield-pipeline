name: .Deploys

on:
  workflow_call:
    inputs:
      ### Required
      release:
        description: Deployment release; usually PR number, test or prod
        required: true
        type: string

      ### Typical / recommended
      environment:
        description: Environment name; omit for PRs
        required: false
        type: string
      params:
        description: 'Extra parameters to pass to helm upgrade'
        default: ''
        required: false
        type: string
      triggers:
        description: Paths used to trigger a build; e.g. ('./backend/' './frontend/)
        required: false
        type: string

      ### Usually a bad idea / not recommended
      directory:
        description: 'Chart directory'
        default: 'charts'
        required: false
        type: string
      tag:
        description: `Tag, which defaults to a PR number (even on PR merge)`
        required: false
        type: string
      timeout-minutes:
        description: 'Timeout minutes'
        default: 10
        required: false
        type: number
      values:
        description: 'Values file'
        default: 'values.yaml'
        required: false
        type: string

    outputs:
      triggered:
        description: 'Has a deployment has been triggered?'
        value: ${{ jobs.deploys.outputs.triggered }}

env:
  repo_release: ${{ github.event.repository.name }}-${{ inputs.release }}

jobs:
  deploys:
    name: Helm
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-22.04
    timeout-minutes: ${{ inputs.timeout-minutes }}
    outputs:
      triggered: ${{ steps.triggers.outputs.triggered }}
    steps:
      - uses: bcgov-nr/action-diff-triggers@v0.1.0
        id: triggers
        with:
          triggers: ${{ inputs.triggers }}

      - name: Get PR Number
        id: pr
        uses: bcgov-nr/action-get-pr@v0.0.1

      - name: Set Tag
        id: tag
        run: |
          if [ -z ${{ inputs.tag }} ]; then
            echo "tag=${{ steps.pr.outputs.pr }}" >> $GITHUB_ENV
          else
            echo "tag=${{ inputs.tag }}" >> $GITHUB_ENV
          fi

      - name: Deploy
        if: steps.triggers.outputs.triggered == 'true'
        working-directory: ${{ inputs.directory }}
        shell: bash
        run: |
          oc login --token=${{ secrets.oc_token }} --server=${{ vars.oc_server }}
          oc project ${{ vars.OC_NAMESPACE }} # Safeguard!

          # Interrupt any previous jobs (status = pending-upgrade)
          PREVIOUS=$(helm status ${{ env.repo_release }} -o json | jq .info.status || true)
          if [[ ${PREVIOUS} =~ pending ]]; then
            echo "Rollback triggered"
            helm rollback ${{ env.repo_release }} || \
              helm uninstall ${{ env.repo_release }}
          fi

          # Clean previous deployments for PR pipeline, if any 
          if [[ '${{inputs.environment}}' == '' ]]; then
            helm uninstall ${{ env.repo_release }} || true
            # Remove Bitnami Postgres PVCs
            oc delete pvc data-${{ env.repo_release }}-bitnami-pg-0 || \
              echo "Not found: pvc data-${{ env.repo_release }}-bitnami-pg-0"
          fi

          # Prepare Helm chart
          helm dependency update
          helm package --app-version="$tag" --version=$tag .
          
          # Deploy Helm chart
          helm upgrade \
            --set-string global.repository=${{ github.repository }} \
            --set-string global.tag=$tag \
            ${{ inputs.params }} \
            --install --wait --atomic  ${{ env.repo_release }} \
            --timeout ${{ inputs.timeout-minutes }}m \
            --values ${{ inputs.values }} \
            ./${{ github.event.repository.name }}-$tag.tgz

          # Print history
          helm history ${{ env.repo_release }}
          
          # Remove old build runs, build pods and deployment pods
          oc delete po --field-selector=status.phase==Succeeded || true
