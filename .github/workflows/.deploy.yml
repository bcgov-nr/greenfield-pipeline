name: .Deploys

on:
  workflow_call:
    inputs:
      ### Required
      target:
        description: Deployment target; usually PR number, test or prod
        required: true
        type: string

      ### Typical / recommended
      autoscaling:
        description: Autoscaling enabled or not for the deployments
        required: false
        type: boolean
        default: true
      environment:
        description: Environment name
        required: false
        type: string
      tag:
        description: Docker tag; e.g. PR number, tag, test or prod
        required: false
        type: string
        default: ${{ github.event.number }}
      triggers:
        description: Paths used to trigger a build; e.g. ('backend/' 'frontend/')
        required: false
        type: string

      ### Usually a bad idea / not recommended
      directory:
        description: 'Chart directory.'
        default: 'charts/${{ github.event.repository.name }}'
        required: false
        type: string
      timeout-minutes:
        description: 'Timeout minutes'
        default: 10
        required: false
        type: number
      values:
        description: 'Values file.'
        default: 'values.yaml'
        required: false
        type: string

env:
  release: ${{ github.event.repository.name }}-${{ inputs.target }}
  tag: ${{ inputs.tag }}

jobs:
  deploys:
    name: Helm
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-22.04
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - uses: actions/checkout@v4
      - name: Check Deployment Triggers
        id: triggers
        run: |
          # Expand for trigger processing

          # Always deploy if no triggers are provided
          if [ -z "${{ inputs.triggers }}" ]; then
            echo "Always deploy when no triggers are provided"
            echo "triggered=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Deploy if changed files (git diff) match triggers
          TRIGGERS=${{ inputs.triggers }}
          git fetch origin ${{ github.event.repository.default_branch }}
          while read -r check; do
            for t in "${TRIGGERS[@]}"; do
              if [[ "${check}" =~ "${t}" ]]; then
                  echo "Build triggered based on git diff"
                  echo -e "${t}\n --> ${check}"
                  echo "triggered=true" >> $GITHUB_OUTPUT
                  exit 0
              fi
            done
          done < <(git diff origin/${{ github.event.repository.default_branch }} --name-only)

          # If here skip deployment
          echo "No triggers have fired, deployment skipped"

      - name: Deploy if Triggers Fired
        if: ${{ steps.triggers.outputs.triggered == 'true' }}
        working-directory: ${{ inputs.directory }}
        shell: bash
        run: |
          oc login --token=${{ secrets.oc_token }} --server=${{ vars.oc_server }}
          oc project ${{ vars.OC_NAMESPACE }} # Safeguard!

          # Interrupt any previous jobs (status = pending-upgrade)
          PREVIOUS=$(helm status ${{ env.release }} -o json | jq .info.status || true)
          if [[ ${PREVIOUS} =~ pending ]]; then
            echo "Rollback triggered"
            helm rollback ${{ env.release }} || \
              helm uninstall ${{ env.release }}
          fi

          # Deploy Helm Chart
          helm dependency update
          helm upgrade \
            --set global.autoscaling=${{ inputs.autoscaling }} \
            --set-string global.repository=${{ github.repository }} \
            --set-string global.secrets.databasePassword=${{ secrets.DB_PASSWORD }} \
            --set-string backend.containers[0].tag="${{ env.tag }}" \
            --set-string backend.initContainers[0].tag="${{ env.tag }}" \
            --set-string frontend.containers[0].tag="${{ env.tag }}" \
            --install --wait --atomic ${{ env.release }} \
            --timeout ${{ inputs.timeout-minutes }}m \
            --values ${{ inputs.values }} .

          # Remove old build runs, build pods and deployment pods
          oc delete po --field-selector=status.phase==Succeeded
